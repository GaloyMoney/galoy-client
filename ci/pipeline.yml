#@ load("@ytt:data", "data")

#@ def pipeline_image():
#@   return data.values.docker_registry + "/galoy-app-pipeline"
#@ end

#@ def release_pipeline_image():
#@   return data.values.docker_registry + "/release-pipeline"
#@ end

#@ def task_image_config():
type: registry-image
source:
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ pipeline_image()
#@ end

#@ def release_task_image_config():
type: registry-image
source:
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ release_pipeline_image()
#@ end

jobs:
- name: check-code
  serial: true
  plan:
  - in_parallel:
    - { get: repo, trigger: true }
    - { get: bundled-deps, trigger: true }
    - { get: pipeline-tasks }
  - task: test
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: bundled-deps
      - name: pipeline-tasks
      - name: repo
      run:
        path: pipeline-tasks/ci/tasks/check-code.sh

- name: test
  serial: true
  plan:
  - in_parallel:
    - { get: repo, trigger: true }
    - { get: bundled-deps, trigger: true }
    - { get: pipeline-tasks }
  - task: test
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: bundled-deps
      - name: pipeline-tasks
      - name: repo
      run:
        path: pipeline-tasks/ci/tasks/test.sh

- name: build
  serial: true
  plan:
  - in_parallel:
    - { get: repo, trigger: true }
    - { get: bundled-deps, trigger: true }
    - { get: pipeline-tasks }
  - task: build
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: bundled-deps
      - name: pipeline-tasks
      - name: repo
      outputs:
      - name: repo
      run:
        path: pipeline-tasks/ci/tasks/build.sh

- name: release
  serial: true
  plan:
  - in_parallel:
    - get: repo
      passed:
      - check-code
      - test
      - build
    - get: bundled-deps
    - get: pipeline-tasks
    - get: version
  - task: prep-release
    config:
      platform: linux
      image_resource: #@ release_task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: version
      outputs:
      - name: version
      - name: artifacts
      run:
        path: pipeline-tasks/ci/tasks/vendor/prep-release-src.sh
  - task: build
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: bundled-deps
      - name: pipeline-tasks
      - name: repo
      outputs:
      - name: repo
      run:
        path: pipeline-tasks/ci/tasks/build.sh
  - task: update-repo
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: version
      outputs:
      - name: repo
      run:
        path: pipeline-tasks/ci/tasks/update-repo.sh
  - put: repo-out
    params:
      tag: artifacts/gh-release-tag
      repository: repo
      rebase: true
  - put: gh-release
    params:
      name: artifacts/gh-release-name
      tag: artifacts/gh-release-tag
      body: artifacts/gh-release-notes.md
  - put: npm-release
    params:
      path: repo
      version: version/version
      public: true
  - put: version
    params:
      file: version/version

- name: install-deps
  serial: true
  plan:
  - in_parallel:
    - { get: deps, trigger: true }
    - { get: pipeline-tasks }
    - { get: deps-version, params: { bump: patch } }

  - task: install-deps
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: deps
      - name: deps-version
      outputs:
      - name: bundled-deps
      run:
        path: pipeline-tasks/ci/tasks/install-deps.sh

  - put: bundled-deps
    params:
      file: bundled-deps/bundled-deps-*.tgz

resources:
- name: repo
  type: git
  source:
    ignore_paths: ["ci/*[^md]"]
    fetch_tags: true
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: pipeline-tasks
  type: git
  source:
    paths: [ci/tasks/*, Makefile]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: deps
  type: git
  source:
    paths: [yarn.lock]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: repo-out
  type: git
  source:
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: version
  type: semver
  source:
    initial_version: 0.0.0
    driver: git
    file: version
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_version_branch
    private_key: #@ data.values.github_private_key

- name: gh-release
  type: github-release
  source:
    owner: #@ data.values.gh_org
    repository: #@ data.values.gh_repository
    access_token: #@ data.values.github_token

- name: npm-release
  type: npm
  source:
    package: client
    scope: galoymoney
    registry:
      uri: https://registry.npmjs.org/
      token: #@ data.values.npm_token

- name: deps-version
  type: semver
  source:
    initial_version: 0.1.0
    driver: gcs
    bucket: #@ data.values.artifacts_bucket_name
    key: galoy-client-artifacts/versions/deps
    json_key: #@ data.values.staging_inception_creds

- name: bundled-deps
  type: gcs-resource
  source:
    bucket: #@ data.values.artifacts_bucket_name
    json_key: #@ data.values.staging_inception_creds
    regexp: galoy-client-artifacts/deps/bundled-deps-v(.*)-.*.tgz

resource_types:
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: npm
  type: docker-image
  source:
    repository: timotto/concourse-npm-resource
